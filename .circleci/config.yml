# Use the latest 2.1 version of CircleCI pipeline process engine.
version: 2.1

# Define a job to be invoked later in a workflow.

commands:  
  destroy_environment:
    steps:
      - run: 
          name: "Destroy environment"
          command:
            aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5}

jobs:
  configure_ansible_infrastructure:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    docker:
      - image: python:3.10.5-alpine3.16
    # Add job steps
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:  ["0d:42:f7:5c:da:67:b6:9c:d2:0e:3b:50:b2:56:7c:f1"]

      - run:
          name: Install dependencies (openssh)
          command: |
            apk add --update openssh # Install openssh
      - run:
          name: Install git
          command: |
            apk add --update git # Install git

      - run:
          name: Install dependencies (ansible)
          command: |
            apk add --update ansible # Install ansible

      - run:
          name: Run your playbook to configure server
          command: |
            ansible-playbook main-remote.yml -i inventory.txt

  create_infrastructure:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    docker:
      - image: amazon/aws-cli
    # Add steps to the job. Steps to create a cloudformation stack
    steps:
      - checkout
      - run:
          name: "Create Cloudformation Stack"
          command: |
            aws cloudformation deploy \
            --template-file cf-template.yml \
            --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5} \
            --region us-east-1
          # - when: on_fail # a command used to ignore errors



  create_and_deploy_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: "Create Cloudfront Distribution"
          command: |
            aws cloudformation deploy \
            --template-file bucket.yml \
            --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides MyBucketName="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"
      - run: aws s3 sync . s3://mybucket-${CIRCLE_WORKFLOW_ID:0:7} --delete


  # Fetch and save the pipeline ID (bucket ID) responsible for the last release.
  get_last_deployment_id:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Fetch and save the old pipeline ID (bucket name) responsible for the last release.
          command: |
            aws cloudformation \
            list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
            --no-paginate --output text > ~/textfile.txt
      - persist_to_workspace:
          root: ~/
          paths: 
            - textfile.txt

  # Executes the cloudfront.yml template that will modify the existing CloudFront Distribution, change its target from the old bucket to the new bucket - `mybucket-${CIRCLE_WORKFLOW_ID:0:7}`. 
  # Notice here we use the stack name `production-distro` which is the same name we used while deploying to the S3 bucket manually.
  promote_to_production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute cloudfront.yml
          command: |
            aws cloudformation deploy \
            --template-file cloudfront.yml \
            --stack-name production-distro \
            --parameter-overrides PipelineID="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"

  # Destroy the previous production version's S3 bucket and CloudFormation stack. 
  clean_up_old_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Destroy the previous S3 bucket and CloudFormation stack. 
          # Use $OldBucketID environment variable or mybucket644752792305 below.
          # Similarly, you can create and use $OldStackID environment variable in place of production-distro 
          command: |
            export OldBucketID=$(cat ~/textfile.txt)
            aws s3 rm "mybucket791408011508" --recursive

  # smoke_test:
  #   docker:
  #     - image: alpine:latest
  #   steps:
  #     - run: apk add --update curl
  #     - run:
  #         name: "Smoke test"
  #         command: |
  #           URL= "https://blog.udacity.com/"

  #           if curl -s --head ${URL}
  #           then
  #             return 0
  #           else
  #             return 1
  #           fi


  destroy_stack_test: #smoke test
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: "simulate error"
          command: |
            return 1
      - run:
          command: destroy_environment
          when: on_fail # for some reason, this didn't work have to add the command to the create_infrastructure portion


# Invoke jobs via workflows
workflows:
  ansible-setup-workflow:
    jobs:
      # - create_infrastructure
      # - configure_ansible_infrastructure
      # - smoke_test
      # - destroy_stack_test:
      #     requires: 
      #       - create_infrastructure

      - create_and_deploy_front_end
      - promote_to_production:
          requires: 
            - create_and_deploy_front_end
      - get_last_deployment_id
      - clean_up_old_front_end:
          requires:
            - get_last_deployment_id
            - promote_to_production
